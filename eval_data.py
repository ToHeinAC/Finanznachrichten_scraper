# Created by He at 06.01.2021

# Feature: data evaluations

# Scenario: manipulations based on the temp file generated by get_basedata.py

#---------------------------------------------------------

import nltk
nltk.downloader.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import yfinance as yf
from helper import *

#define stock
stocks = ['nvidia']

#read date and do basic processing
date_cols=['Zeit']
df=pd.read_csv('./tmp/scraped_news.csv', parse_dates=date_cols)
df['Datum']=df['Zeit'].dt.date
df['Stunde']=df['Zeit'].dt.time
#df['Schlagzeile'] = df['Schlagzeile'].astype("|S")
df['Aktie']=stocks[0]
df=df.loc[(df['Leser'] !='Werbung')
          & (df['Schlagzeile'].values != None)
          & (df['Zeit'].values != None)]
df=df.reset_index(drop=True)
df.to_excel('./tmp/scraped_and_cleaned_news.xlsx', index=False, sheet_name='data')

#translate
chunk_size = 5
chs = []
for i in chunker(df, chunk_size):
    chs.append(i)

trl = []
for i in range(len(chs)):
    trl.append(googletranslate_en([str(j) for j in chs[i]['Schlagzeile'].tolist()[:]]))

flatten = lambda t: [item for sublist in t for item in sublist]
trls = flatten(trl)
df['Schlagzeile EN'] = trls
df=df.replace('in', 'xyz')

#sentiment analysis
# Instantiate the sentiment intensity analyzer
vader = SentimentIntensityAnalyzer()

# Set column names
columns = ['Aktie','Datum', 'Stunde', 'Schlagzeile EN']

# Convert the parsed_news list into a DataFrame called 'parsed_and_scored_news'
parsed_and_scored_news = pd.DataFrame(df, columns=columns)
parsed_and_scored_news = parsed_and_scored_news.reset_index(drop=True)

# Iterate through the headlines and get the polarity scores using vader
scores = parsed_and_scored_news['Schlagzeile EN'].apply(vader.polarity_scores).tolist()

# Convert the 'scores' list of dicts into a DataFrame
scores_df = pd.DataFrame(scores)

# Join the DataFrames of the news and the list of dicts
parsed_and_scored_news = parsed_and_scored_news.join(scores_df, rsuffix='_right')

# Convert the date column from string to datetime
parsed_and_scored_news['Datum'] = pd.to_datetime(parsed_and_scored_news.Datum).dt.date

#plots
plot_vaderscores(parsed_and_scored_news, './tmp/fig_vaderscores.png')

cnt_df=plot_countofnewsperday(parsed_and_scored_news, './tmp/fig_countofnewsperday.png')

nvda = yf.Ticker("NVDA")
hist = nvda.history(period="30d")
cnt_df.index = pd.to_datetime(cnt_df.index)
mask = (hist.index >= min(cnt_df.index))
nvda_df = hist.loc[mask]
plot_closeprice(nvda_df, './tmp/fig_closeprice.png')

print('Evaluation successful!')